PACKAGE

package skiplist
    import "github.com/glenn-brown/container/skiplist"

    Package skiplist implements an indexable ordered multimap.

    This skip list implementation is distinguished by supporting index
    addressing, allowing multiple values per key, automatically adjusting
    its depth, and mimicing Go's container/list interface where possible.

    Insert, Remove, and Find operations all require O(log(N)) time or less.
    The skiplist requires O(N) space.

    To efficiently iterate over the list (where s is a *Skiplist):

	 for e := s.Front(); e != nil; e = e.Next() {
		// do something with e.Value and/or e.Key()
	 }

    Pop the first element in the list with s.RemoveN(0). Pop the last with
    s.RemoveN(s.Len()-1).

TYPES

type Element struct {
    Value interface{}
    // contains filtered or unexported fields
}
    Element is an element in the list.

func (e *Element) Key() interface{}
    Key returns the key used to insert the value in the list element.

func (e *Element) Next() *Element
    Next returns the next-greater list element or nil.

func (e *Element) String() string
    String returns a Key:Value string representation.

type Skiplist struct {
    // contains filtered or unexported fields
}

func New(less func(key1, key2 interface{}) bool, r *rand.Rand) *Skiplist
    New returns a new skiplist in O(1) time. Function less must return true
    iff key a is less than key b. The list will be sorted from least to
    greatest. R is the random number generator to use or nil.

func (l *Skiplist) Find(key interface{}) (e *Element, pos int)
    Find returns the youngest element inserted with key in the skiplist,
    without modifying the list, in O(log(N)) time. If there is no match, nil
    is returned. It also returns the current position of the found element,
    or -1.

func (l *Skiplist) FindN(pos int) *Element
    FindN returns the Element at position pos in the skiplist, in
    O(log(pos)) time. If no such entry exists, nil is returned.

func (s *Skiplist) Front() *Element
    Return the first list element in O(1) time.

func (l *Skiplist) Insert(key interface{}, value interface{}) *Skiplist
    Insert a {key,value} pair into the skip list in O(log(N)) time.

func (l *Skiplist) Len() int
    Len returns the number of elements in the Skiplist.

func (l *Skiplist) Remove(key interface{}) *Element
    Remove the youngest Element associate with Key, if any, in O(1) time.
    Return the removed element or nil.

func (l *Skiplist) RemoveN(pos int) *Element
    RemoveN removes any element at position pos in O(log(pos)) time,
    returning it or nil.

func (l *Skiplist) String() string
    Function String prints only the key/value pairs in the skip list.


