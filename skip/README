PACKAGE

package skip
    import "github.com/glenn-brown/container/skip"

    Package skip implements a skip list. A skip.List stores key/value pairs
    sorted by key. Values can be referenced by key or position. Operations
    require O(log(N)) time and space. The skiplist requires O(N) space.

TYPES

type Lesser interface {
    Less(Lesser) bool
}

type List struct {
    // contains filtered or unexported fields
}

func (l *List) Insert(key Lesser, val interface{}) *List
    Insert inserts a {key,val} pair into the skip list.

func (l *List) Len() int
    Len returns the number of elements in the List.

func (l *List) Peek(key Lesser) (val interface{}, ok bool)
    Find returns the youngest value associated with key in the skiplist.

func (l *List) PeekN(pos int) (key Lesser, val interface{}, ok bool)
    ValN returns the key,value pair stored at pos.

func (l *List) Remove(key Lesser) (val interface{}, ok bool)
    Remove the youngest key/value pair associated with key from the
    skiplist, if a match exists.

func (l *List) RemoveN(pos int) (key Lesser, val interface{}, ok bool)
    RemoveIndex returns and removes the key,value pair stored at pos, in
    O(N) time.

func (l *List) String()
    Function String prints only the key/value pairs in the skip list.


